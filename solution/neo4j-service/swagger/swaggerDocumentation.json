{
  "openapi": "3.0.0",
  "info": {
    "title": "Neo4j Service API",
    "version": "1.0.0",
    "description": "API documentation for the Neo4j Service."
  },
  "servers": [
    {
      "url": "http://localhost:3002",
      "description": "Local server"
    }
  ],
  "paths": {
    "/api/comment/repliesToOthers/{userId}": {
      "get": {
        "summary": "Retrieve all the comments made by the specified user that are replies",
        "description": "Retrieve all the comments made by the specified user that are replies to other Comment , using the relationship REPLY_OF.",
        "parameters": [
          {
            "name": "userId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer"
            },
            "description": "The ID of the user."
          }
        ],
        "responses": {
          "200": {
            "description": "A list of comment replies made by the specified user ID.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ReplyInfo"
                  }
                }
              }
            }
          },
          "404": {
            "description": "No original message found for the specified comment ID."
          },
          "500": {
            "description": "Error retrieving replies to others."
          }
        }
      }
    },
    "/api/comment/replies/{commentId}": {
      "get": {
        "summary": "Retrieve the original message that a comment replies to",
        "description": "Retrieves the original message (post or comment) to which the specified comment replies, using the REPLY_OF relationship.",
        "parameters": [
          {
            "name": "commentId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer"
            },
            "description": "The ID of the comment."
          }
        ],
        "responses": {
          "200": {
            "description": "The original message to which the specified comment replies. The object includes the content, ID, and type.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CommentDetails"
                }
              }
            }
          },
          "404": {
            "description": "No original message found for the specified comment ID."
          },
          "500": {
            "description": "An error occurred while retrieving the original message by comment ID."
          }
        }
      }
    },
    "/api/post/byUser/{userId}": {
      "get": {
        "summary": "Retrieve all contents IDs authored by a specific user",
        "description": "Retrieves all content IDs and types created by a specific user.",
        "parameters": [
          {
            "name": "userId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer"
            },
            "description": "The ID of the user."
          }
        ],
        "responses": {
          "200": {
            "description": "A list of content created by the specified user ID. The object includes the content's id, type, and the content itself.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "type": "object",
                    "$ref": "#/components/schemas/ContentItem"
                  }
                }
              }
            }
          },
          "404": {
            "description": "No content found for the specified user ID."
          },
          "500": {
            "description": "Error retrieving content for the user."
          }
        }
      }
    },
    "/api/post/Forumtitle/{postId}": {
      "get": {
        "summary": "Retrieve the forum title for a specific post",
        "description": "Retrieves the forum title to which the specified post belongs.",
        "parameters": [
          {
            "name": "postId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer"
            },
            "description": "The ID of the post."
          }
        ],
        "responses": {
          "200": {
            "description": "The forum title.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "string",
                  "$ref": "#/components/schemas/ForumTitleOnly"
                }
              }
            }
          },
          "404": {
            "description": "No forum found for the specified post ID."
          },
          "500": {
            "description": "An error occurred while retrivingg the forum title."
          }
        }
      }
    },
    "/api/people/known/{id}": {
      "get": {
        "summary": "Retrieve people known by a user",
        "description": "Retrieves all the people known by the user with the given ID.",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer"
            },
            "description": "The ID of the user whose connections are to be found."
          }
        ],
        "responses": {
          "200": {
            "description": "A list of names and surnames representing all known people.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "type": "object",
                    "$ref": "#/components/schemas/PersonBasic"
                  }
                }
              }
            }
          },
          "404": {
            "description": "No friends found for the specified user ID."
          },
          "500": {
            "description": "An error occurred while retriving known people by the user ID."
          }
        }
      }
    },
    "/api/people/byLocation/{location}/byTag/{tag}": {
      "get": {
        "summary": "Search people by location and tag",
        "description": "Searches people based on the specified location and tag provided in the URL parameters. Both parameters must be present.",
        "parameters": [
          {
            "name": "location",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer"
            },
            "description": "The location ID to search for People."
          },
          {
            "name": "tag",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer"
            },
            "description": "The tag ID representing the person's interest."
          }
        ],
        "responses": {
          "200": {
            "description": "A list of individuals' first and last names (and ID) filtered by location and tag.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "type": "object",
                    "$ref": "#/components/schemas/PersonBasic"
                  }
                }
              }
            }
          },
          "404": {
            "description": "No person found for the specified tag and location ID."
          },
          "500": {
            "description": "An error occurred while retriving people by location Id and tag ID."
          }
        }
      }
    },
    "/api/people/byOrganization/{type}/{id}": {
      "get": {
        "summary": "Retrieve People by organization works in or studies in",
        "description": "Retrieves People associated with a specific organization based on the provided organization ID and type (Company or University).",
        "parameters": [
          {
            "name": "type",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "enum": [
                "Company",
                "University"
              ]
            },
            "description": "The type of organization (Company or University)."
          },
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "The identifier of the organization."
          }
        ],
        "responses": {
          "200": {
            "description": "A list of individuals working or studying at an organization, along with the start year for each.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "type": "object",
                    "$ref": "#/components/schemas/PersonInOrganization"
                  }
                }
              }
            }
          },
          "404": {
            "description": "No person found dor the specified organization ID."
          },
          "500": {
            "description": "An error occurred while retriving people by organization ID."
          }
        }
      }
    },
    "/api/people/fof/{id}": {
      "get": {
        "summary": "Retrieve friends of friends by user ID",
        "description": "Returns a list of people who share mutual friends with the specified user, based on the given user ID.",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer"
            },
            "description": "The ID of the user."
          }
        ],
        "responses": {
          "200": {
            "description": "A list of names and surnames (and mutual friends) representing friends of friends of the user.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "type": "object",
                    "$ref": "#/components/schemas/PersonWithMutualFriends"
                  }
                }
              }
            }
          },
          "404": {
            "description": "No friends of friends found for the specified user ID."
          },
          "500": {
            "description": "An error occurred while retrieving friends of friends by user ID."
          }
        }
      }
    }
  },
  "components": {
    "schemas": {
      "ReplyInfo": {
        "type": "object",
        "description": "Represents a reply to a comment.",
        "properties": {
          "replyId": {
            "type": "integer",
            "description": "Unique identifier of the reply content.",
            "example": 1168231106633
          },
          "originalId": {
            "type": "integer",
            "description": "ID of the original comment to which this is a reply.",
            "example": 1168231106628
          }
        }
      },
      "CommentDetails": {
        "type": "object",
        "description": "Represents the basic information of a comment.",
        "properties": {
          "originalId": {
            "type": "integer",
            "description": "Original content ID (may refer to a parent post or comment).",
            "example": 1168231106601
          },
          "originalType": {
            "type": "string",
            "description": "Type of the original content.",
            "example": "Comment"
          },
          "id": {
            "type": "integer",
            "description": "Unique identifier of the comment.",
            "example": 1168231106601
          },
          "content": {
            "type": "string",
            "description": "Textual content of the comment.",
            "example": "About Woodrow Wilson"
          }
        }
      },
      "ContentItem": {
        "type": "object",
        "description": "Represents a generic content item, such as a post or a comment.",
        "properties": {
          "id": {
            "type": "integer",
            "description": "Unique identifier of the content.",
            "example": 893353197746
          },
          "type": {
            "type": "string",
            "description": "Type of content (e.g., Post, Comment).",
            "example": "Post"
          }
        }
      },
      "PersonBasic": {
        "type": "object",
        "description": "Basic identification information of a person.",
        "properties": {
          "id": {
            "type": "integer",
            "description": "Unique identifier of the person.",
            "example": 26388279066655
          },
          "name": {
            "type": "string",
            "description": "First name of the person.",
            "example": "Otto"
          },
          "surname": {
            "type": "string",
            "description": "Last name of the person.",
            "example": "Richter"
          }
        }
      },
      "PersonWithMutualFriends": {
        "type": "object",
        "description": "Represents a person along with the number of mutual friends.",
        "properties": {
          "id": {
            "type": "integer",
            "description": "Unique identifier of the person.",
            "example": 26388279066655
          },
          "name": {
            "type": "string",
            "description": "First name of the person.",
            "example": "Otto"
          },
          "surname": {
            "type": "string",
            "description": "Last name of the person.",
            "example": "Richter"
          },
          "mutualFriends": {
            "type": "integer",
            "description": "Number of mutual friends between users.",
            "example": 1
          }
        }
      },
      "PersonInOrganization": {
        "type": "object",
        "description": "Represents a person affiliated with an organization and the year they joined.",
        "properties": {
          "id": {
            "type": "integer",
            "description": "Unique identifier of the person.",
            "example": 26388279066658
          },
          "name": {
            "type": "string",
            "description": "First name of the person.",
            "example": "Roberto"
          },
          "surname": {
            "type": "string",
            "description": "Last name of the person.",
            "example": "Diaz"
          },
          "since": {
            "type": "integer",
            "description": "Year the person joined the organization.",
            "example": 2004
          }
        }
      },
      "ForumTitleOnly": {
        "type": "object",
        "description": "Contains only the title of a forum.",
        "properties": {
          "title": {
            "type": "string",
            "description": "Title of the forum.",
            "example": "Wall of Hossein Forouhar"
          }
        }
      }
    }
  }
}