{
  "openapi": "3.0.3",
  "info": {
    "title": "Gateway Service API",
    "version": "1.0.0",
    "description": "This is the API documentation for the Gateway Service."
  },
  "servers": [
    {
      "url": "http://localhost:3003",
      "description": "Local server"
    }
  ],
  "paths": {
    "/comment/avgAnswer/id": {
      "get": {
        "summary": "Get average reply time by person ID",
        "description": "Retrieves the average reply time for comments made by a person.",
        "parameters": [
          {
            "name": "personId",
            "in": "query",
            "description": "The ID of the person.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The average reply time in seconds, followed by the value in days, hours and minutes.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "averageReplyTimeSeconds": {
                      "type": "number"
                    },
                    "formatted": {
                      "type": "object",
                      "properties": {
                        "days": {
                          "type": "integer"
                        },
                        "hours": {
                          "type": "integer"
                        },
                        "minutes": {
                          "type": "integer"
                        },
                        "seconds": {
                          "type": "integer"
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "No comments or replies found for the specified user",
            "content": {
              "application/json": {
                "examples": {
                  "NoComments": {
                    "summary": "No comments found",
                    "value": {
                      "message": "No comments found for the specified user ID."
                    }
                  },
                  "NoReplies": {
                    "summary": "No replies found",
                    "value": {
                      "message": "No replies found for the specified user ID."
                    }
                  }
                }
              }
            }
          },
          "500": {
            "description": "An error occurred while loading the average reply time."
          }
        }
      }
    },
    "/person/id": {
      "get": {
        "summary": "Get person by ID",
        "description": "Retrieves person data based on the provided person ID.",
        "parameters": [
          {
            "name": "personId",
            "in": "query",
            "description": "The ID of the person to retrieve.",
            "required": true,
            "schema": {
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Returns the first name and last name of the person associated with the specified ID.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Name"
                }
              }
            }
          },
          "404": {
            "description": "No person found for the specified ID."
          },
          "500": {
            "description": "An error occurred while loading person by ID."
          }
        }
      }
    },
    "/person/byLocation/id": {
      "get": {
        "summary": "Get people by location",
        "description": "Retrieves person data for people located in a specific place.",
        "parameters": [
          {
            "name": "placeId",
            "in": "query",
            "description": "The ID of the place to filter people.",
            "required": true,
            "schema": {
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "An array of detailed person objects for the specified location.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "type": "object",
                    "$ref": "#/components/schemas/PersonDetail"
                  }
                }
              }
            }
          },
          "404": {
            "description": "No content found for the specified user ID or creator not found",
            "content": {
              "application/json": {
                "examples": {
                  "NoContent": {
                    "summary": "No content Found",
                    "value": {
                      "message": "No content found for the specified user ID"
                    }
                  },
                  "CreatorNotFound": {
                    "summary": "Creator not found",
                    "value": {
                      "message": "Creator not found"
                    }
                  }
                }
              }
            }
          },
          "500": {
            "description": "An error occurred while loading person by location."
          }
        }
      }
    },
    "/person/byLocation/{locId}/byTag/{tagId}": {
      "get": {
        "summary": "Get people by location and tag",
        "description": "Retrieves people associated with a specific location and tag.",
        "parameters": [
          {
            "name": "locId",
            "in": "path",
            "description": "The location ID.",
            "required": true,
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "tagId",
            "in": "path",
            "description": "The tag ID.",
            "required": true,
            "schema": {
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "A list containing people information, including first name, last name and ID.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "type": "object",
                    "$ref": "#/components/schemas/PersonMinimal"
                  }
                }
              }
            }
          },
          "404": {
            "description": "No person found for the specified tag and location."
          },
          "500": {
            "description": "Internal Server Error"
          }
        }
      }
    },
    "/person/known/id": {
      "get": {
        "summary": "Get known people",
        "description": "Retrieves a list of known people for the given person ID.",
        "parameters": [
          {
            "name": "personId",
            "in": "query",
            "description": "The person's ID.",
            "required": true,
            "schema": {
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "An array of people known by the user identified by the provided ID. Each object includes the person's first name, last name, and unique identifier.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "$ref": "#/components/schemas/PersonMinimal"
                }
              }
            }
          },
          "404": {
            "description": "No known person found for the specified ID."
          },
          "500": {
            "description": "An error occurred while loading person known by ID"
          }
        }
      }
    },
    "/person/fof/id": {
      "get": {
        "summary": "Get friends of friends (FOF)",
        "description": "Retrieves the list of friends-of-friends for the given person ID.",
        "parameters": [
          {
            "name": "personId",
            "in": "query",
            "description": "The ID of the person.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "A list of individuals, each providing their first name, last name, and the number of mutual friends shared with the specified person ID.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/PersonFOF"
                  }
                }
              }
            }
          },
          "404": {
            "description": "No friend of friend found for the specified user ID."
          },
          "500": {
            "description": "An error occurred while loading friend of friend by ID."
          }
        }
      }
    },
    "/post/creator/id": {
      "get": {
        "summary": "Get content by creator ID",
        "description": "Retrieves all posts and comments created by a specific person along with enriched data (e.g., forum title or parent post data).",
        "parameters": [
          {
            "name": "id",
            "in": "query",
            "description": "The creator's person ID.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "A list of content items created by the specified creator. Each item may be either a comment or a post.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CreatorContent"
                }
              }
            }
          },
          "404": {
            "description": "No content found for the specified user ID"
          },
          "500": {
            "description": "An error occurred while loading content by user ID."
          }
        }
      }
    },
    "/post/byOrganization/{type}/{orgId}": {
      "get": {
        "summary": "Get content by organization",
        "description": "Retrieves people associated with a specific organization and for each person, fetches their posts since a given date.",
        "parameters": [
          {
            "name": "type",
            "in": "path",
            "description": "The organization type.",
            "required": true,
            "schema": {
              "type": "string",
              "enum": [
                "University",
                "Company"
              ]
            }
          },
          {
            "name": "orgId",
            "in": "path",
            "description": "The organization ID.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "A list containing posts from individuals affiliated with the specified organization, either through employment or academic enrollment.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/CreatorPostsContent"
                  }
                }
              }
            }
          },
          "404": {
            "description": "No person found for the given organization."
          },
          "500": {
            "description": "An error occurred while loading post by people's oragnization."
          }
        }
      }
    }
  },
  "components": {
    "schemas": {
      "Name": {
        "type": "object",
        "description": "Basic name structure containing first and last name.",
        "properties": {
          "firstName": {
            "type": "string",
            "description": "The person's given name.",
            "example": "John"
          },
          "lastName": {
            "type": "string",
            "description": "The person's family name.",
            "example": "Doe"
          }
        }
      },
      "PersonDetail": {
        "type": "object",
        "description": "Detailed information about a person, including personal and system-related metadata.",
        "properties": {
          "id": {
            "type": "integer",
            "description": "Unique identifier of the person.",
            "example": 1
          },
          "creationDate": {
            "type": "string",
            "format": "date-time",
            "description": "Date when the person record was created.",
            "example": "2020-01-01T12:00:00Z"
          },
          "firstName": {
            "type": "string",
            "description": "The person's given name.",
            "example": "John"
          },
          "lastName": {
            "type": "string",
            "description": "The person's family name.",
            "example": "Doe"
          },
          "gender": {
            "type": "string",
            "enum": ["male", "female", "other"],
            "description": "Gender of the person.",
            "example": "male"
          },
          "birthday": {
            "type": "string",
            "format": "date-time",
            "description": "The person's date of birth.",
            "example": "1990-05-15T00:00:00Z"
          },
          "locationIP": {
            "type": "string",
            "description": "IP address used during registration or interaction.",
            "example": "192.168.1.1"
          },
          "browserUsed": {
            "type": "string",
            "description": "Web browser used by the person.",
            "example": "Chrome"
          },
          "LocationCityId": {
            "type": "integer",
            "description": "ID of the city where the person is located.",
            "example": 100
          },
          "language": {
            "type": "string",
            "description": "Preferred language of the person.",
            "example": "en"
          },
          "email": {
            "type": "string",
            "description": "Email address of the person.",
            "example": "john.doe@example.com"
          }
        }
      },
      "PersonMinimal": {
        "type": "object",
        "description": "Minimal person information for lightweight operations.",
        "properties": {
          "id": {
            "type": "integer",
            "description": "Unique identifier of the person.",
            "example": 26388279066655
          },
          "name": {
            "type": "string",
            "description": "Given name of the person.",
            "example": "Otto"
          },
          "surname": {
            "type": "string",
            "description": "Family name of the person.",
            "example": "Richter"
          }
        }
      },
      "PersonFOF": {
        "type": "object",
        "description": "Person information including mutual friends for friend-of-friend queries.",
        "properties": {
          "id": {
            "type": "integer",
            "description": "Unique identifier of the person.",
            "example": 26388279066655
          },
          "name": {
            "type": "string",
            "description": "Given name of the person.",
            "example": "Otto"
          },
          "surname": {
            "type": "string",
            "description": "Family name of the person.",
            "example": "Richter"
          },
          "mutualFriends": {
            "type": "integer",
            "description": "Number of mutual friends with the requester.",
            "example": 1
          }
        }
      },
      "ParentPost": {
        "type": "object",
        "description": "Metadata about the original post that a comment is replying to.",
        "properties": {
          "originalId": {
            "type": "number",
            "description": "Original ID of the parent content.",
            "example": 1168231107462
          },
          "originalType": {
            "type": "string",
            "description": "Type of the parent content (Post or Comment).",
            "example": "Post"
          },
          "id": {
            "type": "number",
            "description": "ID of the parent content.",
            "example": 1168231107462
          },
          "content": {
            "type": "string",
            "description": "Content of the parent post.",
            "example": "About Hannibal"
          }
        }
      },
      "CommentContent": {
        "type": "object",
        "description": "Structure representing a comment or a post with metadata.",
        "properties": {
          "contentId": {
            "type": "number",
            "description": "Unique ID of the content (post or comment).",
            "example": 1168231107465
          },
          "type": {
            "type": "string",
            "description": "Type of content: 'Post' or 'Comment'.",
            "example": "Comment"
          },
          "creationDate": {
            "type": "string",
            "format": "date-time",
            "description": "Date the content was created.",
            "example": "2012-11-19T19:51:30.896Z"
          },
          "content": {
            "type": "string",
            "description": "Textual content.",
            "example": "thx"
          },
          "parentPost": {
            "$ref": "#/components/schemas/ParentPost"
          }
        }
      },
      "CreatorContent": {
        "type": "object",
        "description": "Data structure combining creator information with their created content.",
        "properties": {
          "creator": {
            "$ref": "#/components/schemas/Name"
          },
          "content": {
            "type": "array",
            "description": "List of content items authored by the person.",
            "items": {
              "$ref": "#/components/schemas/CommentContent"
            }
          }
        }
      },
      "Post": {
        "type": "object",
        "description": "Detailed information about a post created by a user.",
        "properties": {
          "_id": {
            "type": "string",
            "description": "Internal MongoDB ID of the post.",
            "example": "681252856b3cb58f077f9900"
          },
          "creationDate": {
            "type": "string",
            "format": "date-time",
            "description": "Timestamp of when the post was created.",
            "example": "2012-11-08T17:17:38.086Z"
          },
          "id": {
            "type": "number",
            "description": "LDBC-generated unique ID for the post.",
            "example": 1099511630536
          },
          "imageFile": {
            "type": "string",
            "description": "Name of the image file attached to the post.",
            "example": "photo1099511630536.jpg"
          },
          "locationIP": {
            "type": "string",
            "description": "IP address used at the time of posting.",
            "example": "1.29.220.142"
          },
          "browserUsed": {
            "type": "string",
            "description": "Browser used to create the post.",
            "example": "Chrome"
          },
          "length": {
            "type": "number",
            "description": "Length of the post content.",
            "example": 0
          },
          "CreatorPersonId": {
            "type": "number",
            "description": "ID of the person who created the post.",
            "example": 21990232555527
          },
          "ContainerForumId": {
            "type": "number",
            "description": "ID of the forum container for the post.",
            "example": 1099511628047
          },
          "LocationCountryId": {
            "type": "number",
            "description": "ID of the country location associated with the post.",
            "example": 1
          },
          "forumTitle": {
            "type": "string",
            "description": "Title of the forum where the post was made.",
            "example": "Album 1 of Jun Li"
          }
        }
      },
      "CreatorPostsContent": {
        "type": "object",
        "description": "Information about a content creator and the posts they have published.",
        "properties": {
          "id": {
            "type": "number",
            "description": "Unique identifier of the content creator.",
            "example": 21990232555527
          },
          "name": {
            "type": "string",
            "description": "First name of the creator.",
            "example": "Jun"
          },
          "surname": {
            "type": "string",
            "description": "Last name of the creator.",
            "example": "Li"
          },
          "since": {
            "type": "number",
            "description": "Year when the person joined the organization.",
            "example": 2005
          },
          "posts": {
            "type": "array",
            "description": "List of posts authored by the creator.",
            "items": {
              "$ref": "#/components/schemas/Post"
            }
          }
        }
      }
    }
  }
}
